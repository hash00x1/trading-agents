version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - BINANCE_ENVIRONMENT=${BINANCE_ENVIRONMENT:-testnet}
      - TRADING_MODE=${TRADING_MODE:-paper}
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_API_SECRET=${BINANCE_API_SECRET}
      - BINANCE_PRIVATE_KEY_PATH=${BINANCE_PRIVATE_KEY_PATH}
      - MAX_POSITION_SIZE_USD=${MAX_POSITION_SIZE_USD:-1000}
      - MIN_ORDER_SIZE_USD=${MIN_ORDER_SIZE_USD:-10}
    volumes:
      - ../base_workflow/outputs:/app/base_workflow/outputs:ro
      - ../base_workflow:/app/base_workflow:ro
      - ../binance_wallet_integration:/app/binance_wallet_integration:ro
      - ${BINANCE_PRIVATE_KEY_PATH:-./keys}:/app/keys:ro
    depends_on:
      - frontend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Redis for caching (can be added later)
  # redis:
  #   image: redis:7-alpine
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   restart: unless-stopped

  # Optional: Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    restart: unless-stopped

volumes:
  redis_data:
